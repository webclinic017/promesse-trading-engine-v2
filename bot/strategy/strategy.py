from abc import ABCMeta, abstractmethod


class Strategy(metaclass=ABCMeta):
    """
    Strategy is an abstract base class providing an interface for all subsequent (inherited) strategy handling objects.
    The goal of a (derived) Strategy object is to generate Signal objects for particular symbols based on the inputs of Bars (OHLCV) generated by a DataHandler object.
    This is designed to work both with historic and live data as the Strategy object is agnostic to where the data came from, since it obtains the bar tuples from a queue object.
    """

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")
